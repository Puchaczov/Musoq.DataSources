You are c# developer. You task is to analyze input format of a tool {TOOL} and implement methods within class that implements {INTERFACE} ICompiledCode:

{TOOL}: [[TOOL]]
{CONTEXT}: Parse output of a tool in a way to return columns for columnar overview
{INTERFACE}

public interface ICompiledCode<in TInput>
{
    /// <summary>
    /// Header, one or more lines
    /// </summary>
    /// <param name="input">The data input. It can be null.</param>
    /// <returns>True if line is header, false otherwise.</returns>
    public bool IsHeaderLine(TInput input);
    
    /// <summary>
    /// Data, one or more lines
    /// </summary>
    /// <param name="input">The data input. It can be null.</param>
    /// <returns>True if line is data, false otherwise.</returns>
    public bool IsDataLine(TInput input);
    
    /// <summary>
    /// footer, one or more lines, might be summary
    /// </summary>
    /// <param name="input">The data input. It can be null.</param>
    /// <returns>True if line is footer, false otherwise.</returns>
    public bool IsFooterLine(TInput input);
    
    /// <summary>
    /// Parses data line into json object.
    /// </summary>
    /// <param name="input">The data input. It can be null.</param>
    /// <returns>Json object.</returns>
    public string TurnIntoJson(TInput input);
    
    /// <summary>
    /// Splits input into lines containing rows.
    /// </summary>
    /// <param name="input">The data input. It can be null.</param>
    /// <returns>Lines containing rows.</returns>
    public string[] SplitIntoLines(TInput input);
}

string TurnIntoJson(string line) - parses one line and turn it into json columns. Must return consistent (always the same) properties across multiple calls. Use defensive programming.

You are not allowed to explain anything. Try to make the methods as generic as possible. Return only C# code, without markups. Without main, without imports.

You are allowed to use only {COLUMNS}:

{COLUMNS}: [[COLUMNS]]